{"version":3,"sources":["components/home/MovieListItem.tsx","components/home/MovieDetails.tsx","components/home/MovieDetailsModal.tsx","components/home/MovieForm.tsx","components/home/AddMovieModal.tsx","utils/index.ts","components/EmptyCard.tsx","components/LoadingCard.tsx","components/ErrorCard.tsx","components/home/MovieList.tsx","pages/Home.tsx","components/MovieSearch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MovieListItem","movieItem","onClick","className","id","src","image","name","year","contentRating","movieLength","MovieStatsItem","title","value","MovieDetails","movieId","useState","movie","setMovie","useEffect","allMovies","localStorage","getItem","JSON","parse","filter","item","error","fetchMovieDetails","toUpperCase","tagline","description","genres","shortDescription","releaseDate","totalEarning","vote","MovieDetailsModal","showModal","onClose","Modal","size","show","onHide","backdropClassName","contentClassName","Header","closeButton","MovieForm","onCancelPress","onSuccess","showAlert","setShowAlert","success","setSuccess","msgs","setMsgs","Form","onSubmit","e","preventDefault","target","elements","errors","trim","push","length","movies","data","setItem","stringify","console","log","Group","Label","Control","placeholder","as","rows","Row","Col","type","controlId","Alert","variant","dismissible","Heading","map","index","ButtonGroup","Button","AddMovieModal","Title","Body","getYearFromDate","date","values","split","parseInt","minutesToHour","hours","rhours","Math","floor","minutes","round","EmptyCard","LoadingCard","ErrorCard","MovieList","showDetailsModal","setShowDetailsModal","showAddMovieModal","setAddMovieDetailsModal","setMovies","loading","setLoading","setError","setMovieId","toggleMovieAddForm","showDetails","fetchAllMovies","movielist","Home","MovieSearch","items","onSelect","autoFocus","App","Navbar","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a06faadb.chunk.js","sourcesContent":["import { type } from 'os';\nimport React, { Component } from 'react'\nimport { MovieItemType } from '../../types';\n\ntype MovieListItemType = {\n  movieItem: MovieItemType,\n  onClick?: Function\n}\n\n\nconst MovieListItem = ({ movieItem, onClick }: MovieListItemType) => {\n  return (\n    <div className=\"movie-card\" onClick={onClick ? ()=>onClick(movieItem.id) : ()=>{}}>\n      <div className=\"movie-card-left\">\n        <img src={movieItem.image} />\n        <p>{movieItem.name}</p>\n      </div>\n      <div className=\"movie-card-right\">\n        <span>{movieItem.year}</span>\n        <span className=\"movie-rating\">{movieItem.contentRating}</span>\n        <span>{movieItem.movieLength}</span>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default MovieListItem;","import React, { useState, useEffect } from 'react';\nimport { MovieDetailsType } from '../../types';\n\ntype MovieStatsItemProps = {\n  title: string,\n  value: string,\n}\ntype MovieDetailsProps = {\n  movieId: number\n}\n\nconst MovieDetails = ({ movieId }: MovieDetailsProps) => {\n  const [movie, setMovie] = useState<MovieDetailsType>({});\n  const fetchMovieDetails = () => {\n    try {\n      let allMovies = localStorage.getItem('movies');\n      let myMovies: Array<MovieDetailsType> = [];\n      if(allMovies != null) {\n        myMovies = JSON.parse(allMovies);\n        let movieItem: MovieDetailsType = myMovies.filter((item: MovieDetailsType)=>item.id == movieId)[0];\n        setMovie(movieItem);\n      }\n    } catch (error) {\n      \n    }\n  }\n  useEffect(()=>{\n    fetchMovieDetails();\n  },[movieId])\n  return (\n    <div className=\"movie-details\">\n      <div className=\"image-container\">\n        <img src={movie.image} />\n      </div>\n      <div className=\"details-container\">\n        <h3>{movie.name && movie.name.toUpperCase()}</h3>\n        {movie.tagline && <h5>{movie.tagline}</h5>}\n        <p>{movie.description}</p>\n        <p className=\"genres\">{movie.genres}</p>\n        <p>{movie.shortDescription}</p>\n        <div className=\"movie-stats\">\n          <MovieStatsItem title=\"Original Date\" value={movie.releaseDate} />\n          <MovieStatsItem title=\"Running Time\" value={`${movie.movieLength} mins`} />\n        </div>\n        <div className=\"movie-stats\">\n          <MovieStatsItem title=\"Box Office\" value={movie.totalEarning} />\n          <MovieStatsItem title=\"Vote Average\" value={`${movie.vote}`} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst MovieStatsItem = ({ title, value }: MovieStatsItemProps) => {\n  return (\n    <div className=\"movie-stats-item\">\n      <p className=\"title\">{title}</p>\n      <p className=\"value\">{value}</p>\n    </div>\n  )\n}\n\nexport default MovieDetails;","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport MovieDetails from './MovieDetails';\n\ntype MovieDetailsModalType = {\n  showModal: boolean,\n  movieId: number,\n  onClose: ()=>{}\n}\n\nconst MovieDetailsModal = ({ showModal, movieId, onClose }: MovieDetailsModalType) => {\n\n  return (\n    <Modal size=\"lg\" show={showModal} onHide={onClose} backdropClassName=\"blurred-bg-modal\" contentClassName=\"app-dialog\">\n      <Modal.Header closeButton>\n       \n      </Modal.Header>\n      <MovieDetails movieId={movieId} />\n    </Modal>\n  );\n}\n\n\nexport default MovieDetailsModal;\n","import React, { Component, useState } from 'react'\nimport { Form, Button, Col, ButtonGroup, Alert } from 'react-bootstrap';\nimport { MovieDetailsType } from '../../types';\n\ntype MovieFormTypes = {\n  onCancelPress?: React.MouseEvent,\n  onSuccess?: Function,\n}\n\n\nconst MovieForm = ({ onCancelPress=()=>{}, onSuccess=()=>{} }: MovieFormTypes) => {\n  const [showAlert, setShowAlert] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [msgs, setMsgs] = useState([]);\n\n  const toggleAlertMsg = () => {\n    setShowAlert(!showAlert);\n  }\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    try {\n      const name = e.target.elements.name.value;\n      const tagline = e.target.elements.tagline.value;\n      const image = e.target.elements.image.value;\n      const description = e.target.elements.description.value;\n      const genres = e.target.elements.genres.value;\n      const shortDescription = e.target.elements.shortDescription.value;\n      const releaseDate = e.target.elements.releaseDate.value;\n      const contentRating = e.target.elements.contentRating.value;\n      const movieLength = e.target.elements.movieLength.value;\n      const totalEarning = e.target.elements.totalEarning.value;\n      const vote = e.target.elements.vote.value;\n      const errors: Array<string> = [];\n      if(name.trim() == \"\") {\n        errors.push('Please enter a movie name.');\n      }\n      if(image.trim() == \"\") {\n        errors.push('Please add movie image url.');\n      }\n      if(description.trim() == \"\") {\n        errors.push('Please add movie description.');\n      }\n      if(genres.trim() == \"\") {\n        errors.push('Please add movie genres.');\n      }\n      if(shortDescription.trim() == \"\") {\n        errors.push('Please enter movie\\'s short description.');\n      }\n      if(releaseDate.trim() == \"\") {\n        errors.push('Please select a release date.');\n      }\n      if(movieLength.trim() == \"\") {\n        errors.push('Please add movie length.');\n      }\n      if(totalEarning.trim() == \"\") {\n        errors.push('Please add total earning of the movie.');\n      }\n      if(contentRating.trim() == \"\") {\n        errors.push('Please select content rating.');\n      }\n      if(vote.trim() == \"\" || typeof vote == 'number') {\n        errors.push('Please enter vote of the movie.');\n      }\n      if(errors.length > 0) {\n        setShowAlert(true);\n        setSuccess(false);\n        setMsgs(errors);\n      } else {\n        let allMovies = localStorage.getItem('movies');\n        let movies: Array<MovieDetailsType> = [];\n        let id = 1;\n        if(allMovies != null) {\n          movies = JSON.parse(allMovies);\n          id = movies.length+1;\n        }\n        const data: MovieDetailsType = {id, name, tagline, image, description, genres, shortDescription,  releaseDate, contentRating, movieLength, vote, totalEarning };\n        movies.push(data);\n        localStorage.setItem('movies',JSON.stringify(movies));\n        onSuccess();\n      }     \n    } catch (error) {\n      console.log(\"error\", error);\n      setShowAlert(true);\n      setSuccess(false);\n      setMsgs(['Some error occured. Please try after sometime.'])\n    }\n  }\n\n  return (\n    <>\n      <Form onSubmit={onFormSubmit}>\n        <Form.Group>\n          <Form.Label>Movie Name</Form.Label>\n          <Form.Control name=\"name\" placeholder=\"Movie Name\" />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Movie Image</Form.Label>\n          <Form.Control name=\"image\" placeholder=\"Add movie image url\" />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Tagline</Form.Label>\n          <Form.Control name=\"tagline\" placeholder=\"Tagline of the movie\" />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Description</Form.Label>\n          <Form.Control name=\"description\" as=\"textarea\" rows={3} />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Genres</Form.Label>\n          <Form.Control name=\"genres\" placeholder=\"Action, Drama\" />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Short Description</Form.Label>\n          <Form.Control name=\"shortDescription\" as=\"textarea\" rows={3} />\n        </Form.Group>\n       \n        \n\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Release Date</Form.Label>\n            <Form.Control name=\"releaseDate\" type=\"date\" placeholder=\"24-12-2020\" />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formGridPassword\">\n            <Form.Label>Movie Length(in minutes)</Form.Label>\n            <Form.Control name=\"movieLength\" type=\"number\" placeholder=\"150\" />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Total Earning</Form.Label>\n            <Form.Control name=\"totalEarning\" type=\"currency\" placeholder=\"123456\" />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formGridPassword\">\n            <Form.Label>Movie Content Rating</Form.Label>\n            <Form.Control name=\"contentRating\" as=\"select\">\n              <option>PG-13</option>\n              <option>R</option>\n              <option>TV-MA</option>\n              <option>TV-14</option>\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Movie Vote</Form.Label>\n            <Form.Control name=\"vote\" type=\"text\" placeholder=\"7.7\" />\n          </Form.Group>\n          \n        </Form.Row>\n        {\n          showAlert && \n          <Alert variant=\"danger\" onClose={toggleAlertMsg} dismissible>\n            <Alert.Heading>{success ? 'Success!' : 'Oops!'}</Alert.Heading>\n            {\n              msgs.map((item: string, index: number)=><p key={index}>{item}</p>)\n            }\n          </Alert>\n        }\n        <hr />\n        <ButtonGroup>\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n\n          <Button variant=\"danger\" type=\"button\" onClick={onCancelPress}>\n            Cancel\n          </Button>\n        </ButtonGroup>\n      </Form>\n      \n    </>\n  )\n}\n\nexport default MovieForm;","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport MovieForm from './MovieForm';\n\ntype AddMovieModalType = {\n  showModal: boolean,\n  onClose: Function,\n  onSuccess: Function,\n}\n\nconst AddMovieModal = ({ showModal, onClose, onSuccess }: AddMovieModalType) => {\n\n  return (\n    <Modal show={showModal} onHide={onClose} contentClassName=\"add-movie-dialog\">\n      <Modal.Header closeButton>\n        <Modal.Title>Add new movie</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <MovieForm onCancelPress={onClose} onSuccess={onSuccess} />\n      </Modal.Body>\n    </Modal>\n  );\n}\n\n\nexport default AddMovieModal;\n","export const getYearFromDate = (date: string) => {\n  const values = date.split(\"-\");\n  return parseInt(values[0]);\n}\n\nexport const minutesToHour = (length: number) =>{\n  var num = length;\n  var hours = (num / 60);\n  var rhours = Math.floor(hours);\n  var minutes = (hours - rhours) * 60;\n  var rminutes = Math.round(minutes);\n  return rhours + \"h \" + rminutes + \"m\";\n}","import React, { Component } from 'react';\n\ntype EmptyCardType = {\n  title: string\n}\n\nconst EmptyCard = ({ title }: EmptyCardType) => {\n  return (\n    <div className=\"empty-card\">\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default EmptyCard;","import React, { Component } from 'react';\n\ntype LoadingCardTypes = {\n  title: string\n}\n\nconst LoadingCard = ({ title }: LoadingCardTypes) => {\n  return (\n    <div className=\"loading-card\">\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default LoadingCard;","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\ntype ErrorCardType = {\n  title: string\n}\n\nconst ErrorCard = ({ title }: ErrorCardType) => {\n  return (\n    <Alert variant=\"danger\" className=\"error-card\">\n      {title}\n    </Alert>\n  )\n}\n\nexport default ErrorCard;","import React, { useState, useEffect } from 'react'\nimport MovieListItem from './MovieListItem';\nimport { MovieDetailsType, MovieItemType } from '../../types';\nimport { Button } from 'react-bootstrap';\nimport MovieDetailsModal from './MovieDetailsModal';\nimport AddMovieModal from './AddMovieModal';\nimport { getYearFromDate, minutesToHour } from '../../utils/index';\nimport EmptyCard from '../EmptyCard';\nimport LoadingCard from '../LoadingCard';\nimport ErrorCard from '../ErrorCard';\n\nconst MovieList = () => {\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showAddMovieModal, setAddMovieDetailsModal] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [movieId, setMovieId] = useState(0);\n  const hideMovieDetailsModal = () => setShowDetailsModal(false);\n\n  const toggleMovieAddForm = () => {\n    setAddMovieDetailsModal(!showAddMovieModal);\n  }\n\n  const showDetails = (id: number) => {\n    setMovieId(id);\n    setShowDetailsModal(true);\n  }\n\n  const fetchAllMovies = () => {\n    try {\n      let allMovies = localStorage.getItem('movies');\n      let myMovies: Array<MovieDetailsType> = [];\n      if(allMovies != null) {\n        myMovies = JSON.parse(allMovies);\n        let movielist = myMovies.map((item: MovieDetailsType)=>{\n          return ({\n            id: item.id,\n            name: item.name,\n            image: item.image,\n            year: getYearFromDate(item.releaseDate),\n            contentRating: item.contentRating,\n            movieLength: minutesToHour(item.movieLength)\n          })\n        });\n        setMovies(movielist);\n      }\n      setLoading(false);\n    } catch (error) {\n      setError('Some error occured. Please try after sometime.');\n      setLoading(false);\n    }\n  }\n\n  const onMovieAddSuccess = () => {\n    toggleMovieAddForm();\n    fetchAllMovies();\n  }\n\n  useEffect(()=>{\n    fetchAllMovies();\n  },[])\n\n\n\n  return (\n    <>\n      <div>\n        <div className=\"movie-list-header\">\n          <h2>Movies</h2>\n          <Button onClick={toggleMovieAddForm}>Add New Movie</Button>\n        </div>\n        {\n          loading ? <LoadingCard title=\"Loading movies...\" /> :\n            error == '' ?\n                movies.length == 0 ? <EmptyCard title=\"No movie available.\" /> :\n                  movies.map((item: MovieItemType)=><MovieListItem key={item.id} onClick={showDetails} movieItem={item} />)\n              : <ErrorCard title={error} />\n        }  \n      </div>\n      <MovieDetailsModal showModal={showDetailsModal} movieId={movieId} onClose={hideMovieDetailsModal} />\n      <AddMovieModal showModal={showAddMovieModal} onSuccess={onMovieAddSuccess} onClose={toggleMovieAddForm} />\n    </>\n  )\n}\n\nexport default MovieList;","import React, { Component } from 'react'\nimport MovieList from '../components/home/MovieList'\n\n\nconst Home = () => {\n  return (\n    <div>\n      <MovieList />\n    </div>\n  )\n};\n\nexport default Home","import React, { useState, useEffect } from 'react';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport MovieDetailsModal from './home/MovieDetailsModal';\n\ninterface IMoiveSearch {\n  id: number, \n  name: string\n}\n\n\nconst MovieSearch = () => {\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [movieId, setMovieId] = useState(0);\n\n  useEffect(()=>{\n    fetchAllMovies();\n  }, []); \n\n  const fetchAllMovies = () => {\n    try {\n      let allMovies = localStorage.getItem('movies');\n      let myMovies: Array<IMoiveSearch> = [];\n      if(allMovies != null) {\n        myMovies = JSON.parse(allMovies);\n        let movielist = myMovies.map((item: IMoiveSearch)=>{\n          return ({\n            id: item.id,\n            name: item.name,\n          })\n        });\n        setMovies(movielist);\n      }\n    } catch (error) {\n      \n    }\n  }\n\n  const handleOnSelect = (item) => {\n    // the item selected\n    setMovieId(item.id);\n    setShowDetailsModal(true);\n  }\n  const hideMovieDetailsModal = () => setShowDetailsModal(false);\n  return (\n    <>\n    <div className=\"search-input-container\">\n\n      <ReactSearchAutocomplete\n         items={movies}\n         onSelect={handleOnSelect}\n         autoFocus\n         placeholder=\"Search Movie Title...\"\n       />\n    </div>\n    <MovieDetailsModal showModal={showDetailsModal} movieId={1} onClose={hideMovieDetailsModal} />\n\n  </>\n  );\n};\n\n\nexport default MovieSearch;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.scss';\nimport Home from './pages/Home';\nimport { Button, Container, Form, FormControl, InputGroup, Navbar } from 'react-bootstrap';\nimport MovieSearch from './components/MovieSearch';\n\nconst App = () => (\n  <>\n    <Navbar className=\"bg-dark justify-content-right\">\n      <Container>\n        <div></div><MovieSearch />\n      </Container>\n    </Navbar>\n    <Container>\n      <Home />\n    </Container>\n  </>\n)\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}